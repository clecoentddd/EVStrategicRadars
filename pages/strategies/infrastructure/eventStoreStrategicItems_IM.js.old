
import { v4 as uuidv4 } from 'uuid';

// Simulating an in-memory event store
const eventStore = [];

// Handles event creation

export const sendItemCreated = async (eventPayload) => {
  const event = {
    type: 'STRATEGIC_ELEMENT_CREATED',
    id: uuidv4(), // Generate unique ID for the new item
    strategy_id: eventPayload.strategy_id,
    version: 1, // Starting version
    timeStamp: new Date().toISOString(),
    state: 'Created',
    ...eventPayload,
  };

  // Push the event to the store
  console.log('ES: Item Created Event:', event.state);
  eventStore.push(event);
  console.log('ES: Item Created Event:', event);
  return event;
};

// Handles event updates
export  const sendItemUpdated = async (eventPayload) => {
  const event = {
    type: 'STRATEGIC_ELEMENT_UPDATED',
    id: eventPayload.id,
    version: eventStore.length + 1, // Increment version for simplicity
    timeStamp: new Date().toISOString(),
    state: 'Updated',
    ...eventPayload,
  };

  // Push the event to the store
  eventStore.push(event);
  console.log('ES: Item Updated Event:', event);
  return event;
};

// Handles event deletions
export const sendItemDeleted = async (eventPayload) => {
  const event = {
    type: 'STRATEGIC_ELEMENT_DELETED',
    id: eventPayload,
    version: eventStore.length + 1, // Increment version for simplicity
    timeStamp: new Date().toISOString(),
    state: 'Deleted',
  };

  // Push the event to the store
  eventStore.push(event);
  console.log('ES: Item Deleted Event:', replayElement(event.id));
  return event;
};

// Replay function to build the current state of an aggregate
// Replay function to build the current state of a strategic item
export const replayElement = async (aggregateId) => {
  // Filter events specific to the given aggregate ID
  const filteredEvents = eventStore.filter(event => event.id === aggregateId);

  if (filteredEvents.length === 0) {
    console.log(`No events found for aggregateId: ${aggregateId}`);
    return { error: 'No events found for the specified aggregate ID' };
  }

  // Rebuild the aggregate state by applying each event in chronological order
  const aggregateState = filteredEvents.reduce((currentState, event) => {
    switch (event.type) {
      case 'STRATEGIC_ELEMENT_CREATED':
        // Initialize the aggregate state
        return {
          id: event.id,
          strategy_id: event.strategy_id,
          version: event.version,
          timeStamp: event.timeStamp,
          state: event.state,
          name: event.name,
          description: event.description,
        };

      case 'STRATEGIC_ELEMENT_UPDATED':
        // Apply updates to the current state
        return {
          ...currentState, // Keep existing fields
          ...event, // Overwrite only fields present in the event
          state: 'Updated', // Explicitly mark the state as updated
          version: Math.max(currentState.version || 1, event.version), // Ensure version is incremented correctly
          timeStamp: event.timeStamp, // Update timestamp
        };

      case 'STRATEGIC_ELEMENT_DELETED':
        // Mark the item as deleted and finalize the state
        return {
          ...currentState, // Keep existing fields
          state: 'Deleted', // Mark as deleted
          timeStamp: event.timeStamp, // Update timestamp
          version: event.version, // Update to the latest version
        };

      default:
        console.warn('Unhandled event type:', event.type);
        return currentState; // No changes for unknown event types
    }
  }, {}); // Start with an empty initial state

  console.log('Replay Strategic Item - Rehydrated Aggregate:', aggregateState);
  return aggregateState;
};

    

export default {
  sendItemCreated,
  sendItemUpdated,
  sendItemDeleted,
  replayElement,
  eventStore, // Exporting the store for debugging
};
